If you want to achieve greatness stop asking for permission.
Things work out best for those who make the best of how things work out.
To live a creative life, we must lose our fear of being wrong.
If you are not willing to risk the usual you will have to settle for the ordinary.
Trust because you are willing to accept the risk, not because it's safe or certain.
Take up one idea. Make that one idea your life - think of it, dream of it, live on that idea. Let the brain, muscles, nerves, every part of your body, be full of that idea, and just leave every other idea alone. This is the way to success.
All our dreams can come true if we have the courage to pursue them.
Good things come to people who wait, but better things come to those who go out and get them.
If you do what you always did, you will get what you always got.
Success is walking from failure to failure with no loss of enthusiasm.
Just when the caterpillar thought the world was ending, he turned into a butterfly.
Successful entrepreneurs are givers and not takers of positive energy.
Whenever you see a successful person you only see the public glories, never the private sacrifices to reach them.
Opportunities don't happen, you create them.
Try not to become a person of success, but rather try to become a person of value.
Great minds discuss ideas; average minds discuss events; small minds discuss people.
I have not failed. I've just found 10,000 ways that won't work.
If you don't value your time, neither will others. Stop giving away your time and talents - start charging for it.
A successful man is one who can lay a firm foundation with the bricks others have thrown at him.
No one can make you feel inferior without your consent.
The whole secret of a successful life is to find out what is one's destiny to do, and then do it.
If you're going through hell keep going.
The ones who are crazy enough to think they can change the world, are the ones that do.
Don't raise your voice, improve your argument.
What seems to us as bitter trials are often blessings in disguise.
The meaning of life is to find your gift. The purpose of life is to give it away.
The distance between insanity and genius is measured only by success.
When you stop chasing the wrong things you give the right things a chance to catch you.
Don't be afraid to give up the good to go for the great.
No masterpiece was ever created by a lazy artist.
Happiness is a butterfly, which when pursued, is always beyond your grasp, but which, if you will sit down quietly, may alight upon you.
If you can't explain it simply, you don't understand it well enough.
Blessed are those who can give without remembering and take without forgetting.
Do one thing every day that scares you.
What's the point of being alive if you don't at least try to do something remarkable.
Life is not about finding yourself. Life is about creating yourself.
Nothing in the world is more common than unsuccessful people with talent.
Knowledge is being aware of what you can do. Wisdom is knowing when not to do it.
Your problem isn't the problem. Your reaction is the problem.
You can do anything, but not everything.
Innovation distinguishes between a leader and a follower.
There are two types of people who will tell you that you cannot make a difference in this world: those who are afraid to try and those who are afraid you will succeed.
Thinking should become your capital asset, no matter whatever ups and downs you come across in your life.
I find that the harder I work, the more luck I seem to have.
The starting point of all achievement is desire.
Success is the sum of small efforts, repeated day-in and day-out.
If you want to achieve excellence, you can get there today. As of this second, quit doing less-than-excellent work.
All progress takes place outside the comfort zone.
You may only succeed if you desire succeeding; you may only fail if you do not mind failing.
Courage is resistance to fear, mastery of fear - not absense of fear.
Only put off until tomorrow what you are willing to die having left undone.
People often say that motivation doesn't last. Well, neither does bathing - that's why we recommend it daily.
We become what we think about most of the time, and that's the strangest secret.
The only place where success comes before work is in the dictionary.
The best reason to start an organization is to make meaning; to create a product or service to make the world a better place.
I find that when you have a real interest in life and a curious life, that sleep is not the most important thing.
It's not what you look at that matters, it's what you see.
The road to success and the road to failure are almost exactly the same.
The function of leadership is to produce more leaders, not more followers.
Success is liking yourself, liking what you do, and liking how you do it.
As we look ahead into the next century, leaders will be those who empower others.
A real entrepreneur is somebody who has no safety net underneath them.
The first step toward success is taken when you refuse to be a captive of the environment in which you first find yourself.
People who succeed have momentum. The more they succeed, the more they want to succeed, and the more they find a way to succeed. Similarly, when someone is failing, the tendency is to get on a downward spiral that can even become a self-fulfilling prophecy.
When I dare to be powerful - to use my strength in the service of my vision, then it becomes less and less important whether I am afraid.
Whenever you find yourself on the side of the majority, it is time to pause and reflect.
The successful warrior is the average man, with laser-like focus.
Take up one idea. Make that one idea your life -- think of it, dream of it, live on that idea. Let the brain, muscles, nerves, every part of your body, be full of that idea, and just leave every other idea alone. This is the way to success.
Develop success from failures. Discouragement and failure are two of the surest stepping stones to success.
If you don't design your own life plan, chances are you'll fall into someone else's plan. And guess what they have planned for you? Not much.
If you genuinely want something, don't wait for it -- teach yourself to be impatient.
Don't let the fear of losing be greater than the excitement of winning.
If you want to make a permanent change, stop focusing on the size of your problems and start focusing on the size of you!
You can't connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.
Successful people do what unsuccessful people are not willing to doDon't wish it were easier, wish you were better.
The number one reason people fail in life is because they listen to their friends, family, and neighbors.
The reason most people never reach their goals is that they don't define them, or ever seriously consider them as believable or achievable. Winners can tell you where they are going, what they plan to do along the way, and who will be sharing the adventure with them.
In my experience, there is only one motivation, and that is desire. No reasons or principle contain it or stand against it.
Success does not consist in never making mistakes but in never making the same one a second time.
I don't want to get to the end of my life and find that I lived just the length of it. I want to have lived the width of it as well.
You must expect great things of yourself before you can do them.
Motivation is what gets you started. Habit is what keeps you going.
People rarely succeed unless they have fun in what they are doing.
There is no chance, no destiny, no fate, that can hinder or control the firm resolve of a determined soul.
Our greatest fear should not be of failure but of succeeding at things in life that don't really matter.
You've got to get up every morning with determination if you're going to go to bed with satisfaction.
To be successful you must accept all challenges that come your way. You can't just accept the ones you like.
Success is...knowing your purpose in life, growing to reach your maximum potential, and sowing seeds that benefit others.
Be miserable. Or motivate yourself. Whatever has to be done, it's always your choice.
To accomplish great things, we must not only act, but also dream, not only plan, but also believe.
Most of the important things in the world have been accomplished by people who have kept on trying when there seemed to be no help at all.
You measure the size of the accomplishment by the obstacles you had to overcome to reach your goals.
Real difficulties can be overcome; it is only the imaginary ones that are unconquerable.
It is better to fail in originality than to succeed in imitation.
Fortune sides with him who dares.
Little minds are tamed and subdued by misfortune; but great minds rise above it.
Failure is the condiment that gives success its flavor.
Don't let what you cannot do interfere with what you can do.
You may have to fight a battle more than once to win it.
Dogs have Owners, Cats have Staff.
I do not fear computers. I fear lack of them.
A computer once beat me at chess, but it was no match for me at kick boxing.
Computer Science is no more about computers than astronomy is about telescopes.
The computer was born to solve problems that did not exist before.
Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.
Software is a gas; it expands to fill its container.
All parts should go together without forcing. You must remember that the parts you are reassembling were disassembled by you. Therefore, if you can’t get them together again, there must be a reason. By all means, do not use a hammer.
Standards are always out of date. That’s what makes them standards.
Physics is the universe’s operating system.
It’s hardware that makes a machine fast. It’s software that makes a fast machine slow.
Imagination is more important than knowledge. For knowledge is limited, whereas imagination embraces the entire world, stimulating progress, giving birth to evolution.
The greatest enemy of knowledge is not ignorance, it is the illusion of knowledge.
The more you know, the more you realize you know nothing.
Tell me and I forget. Teach me and I remember. Involve me and I learn.
Real knowledge is to know the extent of one’s ignorance.
If people never did silly things, nothing intelligent would ever get done.
Getting information off the Internet is like taking a drink from a fire hydrant.
If you think your users are idiots, only idiots will use it.
From a programmer’s point of view, the user is a peripheral that types when you issue a read request.
Computers are good at following instructions, but not at reading your mind.
There is only one problem with common sense; it’s not very common.
Your most unhappy customers are your greatest source of learning.
Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.
The best way to get accurate information on Usenet is to post something wrong and wait for corrections.
The most likely way for the world to be destroyed, most experts agree, is by accident.  That’s where we come in; we’re computer professionals. We cause accidents.
Pessimists, we’re told, look at a glass containing 50% air and 50% water and see it as half empty. Optimists, in contrast, see it as half full. Engineers, of course, understand the glass is twice as big as it needs to be.
In a room full of top software designers, if two agree on the same thing, that’s a majority.
It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.
Mostly, when you see programmers, they aren’t doing anything. One of the attractive things about programmers is that you cannot tell whether or not they are working simply by looking at them. Very often they’re sitting there seemingly drinking coffee and gossiping, or just staring into space. What the programmer is trying to do is get a handle on all the individual and unrelated ideas that are scampering around in his head.
If you think you are worth what you know, you are very wrong. Your knowledge today does not have much value beyond a couple of years.  Your value is what you can learn and how easily you can adapt to the changes this profession brings so often.
Programs must be written for people to read, and only incidentally for machines to execute.
Commenting your code is like cleaning your bathroom : you never want to do it, but it really does create a more pleasant experience for you and your guests.
We have to stop optimizing for programmers and start optimizing for users.
Low-level programming is good for the programmer’s soul.
It’s OK to figure out murder mysteries, but you shouldn’t need to figure out code. You should be able to read it.
Looking at code you wrote more than two weeks ago is like looking at code you are seeing for the first time.
It is easier to change the specification to fit the program than vice versa.
Less than 10% of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping.
If you have a procedure with ten parameters, you probably missed some.
How rare it is that maintaining someone else’s code is akin to entering a beautifully designed building, which you admire as you walk around and plan how to add a wing or do some redecorating. More often, maintaining someone else’s code is like being thrown headlong into a big pile of slimy, smelly garbage.
Code generation, like drinking alcohol, is good in moderation.
Simplicity, carried to the extreme, becomes elegance.
A program is never less than 90% complete, and never more than 95% complete.
When you are stuck in a traffic jam with a Porsche, all you do is burn more gas in idle. Scalability is about building wider roads, not about building faster cars.
Everyone by now presumably knows about the danger of premature optimization. I think we should be just as worried about premature design — designing too early what a program should do.
Programming without an overall architecture or design in mind is like exploring a cave with only a flashlight: You don’t know where you’ve been, you don’t know where you’re going, and you don’t know quite where you are.
The best way to predict the future is to implement it.
We need above all to know about changes; no one wants or needs to be reminded 16 hours a day that his shoes are on.
On two occasions I have been asked, ‘If you put into the machine wrong figures, will the right answers come out?’ I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.
Make everything as simple as possible, but not simpler.
Today, most software exists, not to solve a problem, but to interface with other software.
Good specifications will always improve programmer productivity far better than any programming tool or technique.
The difference between theory and practice is that in theory, there is no difference between theory and practice.
Don’t document the problem, fix it.
As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications.
If the code and the comments do not match, possibly both are incorrect.
I think it’s a new feature.  Don’t tell anyone it was an accident.
If you don’t handle [exceptions], we shut your application down. That dramatically increases the reliability of the system.
When debugging, novices insert corrective code; experts remove defective code.
In a software project team of 10, there are probably 3 people who produce enough defects to make them net negative producers.
I think it is inevitable that people program poorly. Training will not substantially help matters.  We have to learn to live with it.
Program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.
Manually managing blocks of memory in C is like juggling bars of soap in a prison shower: It’s all fun and games until you forget about one of them.
There’s no obfuscated Perl contest because it’s pointless.
Java is the most distressing thing to hit computing since MS-DOS.
There are only two things wrong with C++: The initial concept and the implementation.
It was a joke, okay?  If we thought it would actually be used, we wouldn’t have written it!
Web Services are like teenage sex. Everyone is talking about doing it, and those who are actually doing it are doing it badly.
Perl: The only language that looks the same before and after RSA encryption.
I didn’t work hard to make Ruby perfect for everyone, because you feel differently from me. No language can be perfect for everyone. I tried to make Ruby perfect for me, but maybe it’s not perfect for you. The perfect language for Guido van Rossum is probably Python.
XML is not a language in the sense of a programming language any more than sketches on a napkin are a language.” – Charles Simonyi
BASIC is to computer programming as QWERTY is to typing.
It has been discovered that C++ provides a remarkable facility for concealing the trivial details of a program — such as where its bugs are.
UNIX is simple. It just takes a genius to understand its simplicity.
Some people, when confronted with a problem, think ‘I know, I’ll use regular expressions.’ Now they have two problems.
I think computer viruses should count as life. I think it says something about human nature that the only form of life we have created so far is purely destructive.  We’ve created life in our own image.
The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards.
Being able to break security doesn’t make you a hacker anymore than being able to hotwire cars makes you an automotive engineer.
Companies spend millions of dollars on firewalls, encryption and secure access devices, and it’s money wasted, because none of these measures address the weakest link in the security chain.
If you think technology can solve your security problems, then you don’t understand the problems and you don’t understand the technology.
Hoaxes use weaknesses in human behavior to ensure they are replicated and distributed. In other words, hoaxes prey on the Human Operating System.
Passwords are like underwear: you don’t let people see it, you should change it very often, and you shouldn’t share it with strangers.
I am not out to destroy Microsoft, that would be a completely unintended side effect
In an information economy, the most valuable company assets drive themselves home every night. If they are not treated well, they do not return the next morning.
It’s better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.
I’m not one of those who think Bill Gates is the devil. I simply suspect that if Microsoft ever met up with the devil, it wouldn’t need an interpreter.
Two years from now, spam will be solved.
The problem of viruses is temporary and will be solved in two years.
Computer viruses are an urban legend.
In 2031, lawyers will be commonly a part of most development teams.
I don’t know what the language of the year 2000 will look like, but I know it will be called Fortran.
In the future, computers may weigh no more than 1.5 tonnes.
I see little commercial potential for the Internet for at least ten years.
Before man reaches the moon, mail will be delivered within hours from New York to California, to Britain, to India or Australia.
The best way to predict the future is to implement it.” That is the spirit that has made computers and the internet what it is today.
Computers are good at following instructions, but not at reading your mind.”"Hoaxes use weaknesses in human behavior to ensure they are replicated and distributed. In other words, hoaxes prey on the Human Operating System.
It’s hardware that makes a machine fast. It’s software that makes a fast machine slow.
Computers are useless. They can only give you answers.
Computers are like bikinis. They save people a lot of guesswork.
They have computers, and they may have other weapons of mass destruction.
That’s what’s cool about working with computers. They don’t argue, they remember everything, and they don’t drink all your beer.
If the automobile had followed the same development cycle as the computer, a Rolls-Royce would today cost $100, get a million miles per gallon, and explode once a year, killing everyone inside.
Computers are getting smarter all the time. Scientists tell us that soon they will be able to talk to us. (And by ‘they’, I mean ‘computers’. I doubt scientists will ever be able to talk to us.)
I’ve noticed lately that the paranoid fear of computers becoming intelligent and taking over the world has almost entirely disappeared from the common culture. Near as I can tell, this coincides with the release of MS-DOS.
The question of whether computers can think is like the question of whether submarines can swim.
It’s ridiculous to live 100 years and only be able to remember 30 million bytes. You know, less than a compact disc. The human condition is really becoming more obsolete every minute.
The city’s central computer told you? R2D2, you know better than to trust a strange computer!
Never trust a computer you can’t throw out a window.
Hardware: The parts of a computer system that can be kicked.
Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.
I’ve finally learned what ‘upward compatible’ means. It means we get to keep all our old mistakes.
There are two major products that come out of Berkeley: LSD and UNIX. We don’t believe this to be a coincidence.
Every operating system out there is about equal… We all suck.
The Web is like a dominatrix. Everywhere I turn, I see little buttons ordering me to Submit.
Come to think of it, there are already a million monkeys on a million typewriters, and Usenet is nothing like Shakespeare.
The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry.
True innovation often comes from the small startup who is lean enough to launch a market but lacks the heft to own it.
It has been said that the great scientific disciplines are examples of giants standing on the shoulders of other giants.  It has also been said that the software industry is an example of midgets standing on the toes of other midgets.
No matter how slick the demo is in rehearsal, when you do it in front of a live audience, the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.
The bulk of all patents are crap. Spending time reading them is stupid.  It’s up to the patent owner to do so, and to enforce them.”Linus Torvalds)
Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration.
There are two ways of constructing a software design.  One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.
Just remember: you’re not a ‘dummy,’ no matter what those computer books claim.  The real dummies are the people who–though technically expert–couldn’t design hardware and software that’s usable by normal consumers if their lives depended upon it.
Software suppliers are trying to make their software packages more ‘user-friendly’… Their best approach so far has been to take all the old brochures and stamp the words ‘user-friendly’ on the cover.
There’s an old story about the person who wished his computer were as easy to use as his telephone. That wish has come true, since I no longer know how to use my telephone.
Any fool can use a computer. Many do.
There are only two industries that refer to their customers as ‘users’.
Programmers are in a race with the Universe to create bigger and better idiot-proof programs, while the Universe is trying to create bigger and better idiots.  So far the Universe is winning.
Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.
The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.
That’s the thing about people who think they hate computers. What they really hate is lousy programmers.
For a long time it puzzled me how something so expensive, so leading edge, could be so useless.  And then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.
Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.
A programmer is a person who passes as an exacting expert on the basis of being able to turn out, after innumerable punching, an infinite series of incomprehensive answers calculated with micrometric precisions from vague assumptions based on debatable figures taken from inconclusive documents and carried out on instruments of problematical accuracy by persons of dubious reliability and questionable mentality for the avowed purpose of annoying and confounding a hopelessly defenseless department that was unfortunate enough to ask for the information in the first place.
A hacker on a roll may be able to produce–in a period of a few months–something that a small development group (say, 7-8 people) would have a hard time getting together over a year. IBM used to report that certain programmers might be as much as 100 times as productive as other workers, or more.
The best programmers are not marginally better than merely good ones. They are an order-of-magnitude better, measured by whatever standard: conceptual creativity, speed, ingenuity of design, or problem-solving ability.
Great lathe operator commands several times the wage of an average lathe operator, but a great writer of software code is worth 10,000 times the price of an average software writer.
Don’t worry if it doesn’t work right. If everything did, you’d be out of a job.
Measuring programming progress by lines of code is like measuring aircraft building progress by weight.
Writing code has a place in the human hierarchy worth somewhere above grave robbing and beneath managing.
First learn computer science and all the theory. Next develop a programming style. Then forget all that and just hack.
First, solve the problem. Then, write the code.
Optimism is an occupational hazard of programming; feedback is the treatment.
To iterate is human, to recurse divine.
The best thing about a boolean is even if you are wrong, you are only off by a bit.
Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.
There are only two kinds of programming languages: those people always bitch about and those nobody uses.
PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals.
The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense.
It is practically impossible to teach good programming style to students that have had prior exposure to BASIC. As potential programmers, they are mentally mutilated beyond hope of regeneration.
I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing.
There is no programming language–no matter how structured–that will prevent programmers from making bad programs.
Computer language design is just like a stroll in the park. Jurassic Park, that is.
Fifty years of programming language research, and we end up with C++?
Writing in C or C++ is like running a chain saw with all the safety guards removed.
In C++ it’s harder to shoot yourself in the foot, but when you do, you blow off your whole leg.
C++ : Where friends have access to your private members.
One of the main causes of the fall of the Roman Empire was that–lacking zero–they had no way to indicate successful termination of their C programs.
Java is, in many ways, C++–.
Saying that Java is nice because it works on all OSes is like saying that anal sex is nice because it works on all genders.
Fine, Java MIGHT be a good example of what a programming language should be like. But Java applications are good examples of what applications SHOULDN’T be like.
If Java had true garbage collection, most programs would delete themselves upon execution.
Software is like sex: It’s better when it’s free.
The only people who have anything to fear from free software are those whose products are worth even less.
Good code is its own best documentation.
Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else.
The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.
Good programmers use their brains, but good guidelines save us having to think out every case.
In software, we rarely have meaningful requirements. Even if we do, the only measure of success that matters is whether our solution solves the customer’s shifting idea of what their problem is.
Considering the current sad state of our computer programs, software development is clearly still a black art, and cannot yet be called an engineering discipline.
You can’t have great software without a great team, and most software teams behave like dysfunctional families.
As soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought. Debugging had to be discovered. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs.
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are–by definition–not smart enough to debug it.
If debugging is the process of removing bugs, then programming must be the process of putting them in.
I don’t care if it works on your machine! We are not shipping your machine!
Programming is like sex: one mistake and you’re providing support for a lifetime.
There are two ways to write error-free programs; only the third one works.
You can either have software quality or you can have pointer arithmetic, but you cannot have both at the same time.
If McDonalds were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, ‘We’re sorry, here’s a coupon for two more.
Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.
To err is human, but to really foul things up you need a computer.
A computer lets you make more mistakes faster than any invention in human history–with the possible exceptions of handguns and tequila.
Everything that can be invented has been invented.
I think there’s a world market for about 5 computers.
It would appear that we have reached the limits of what it is possible to achieve with computer technology, although one should be careful with such statements, as they tend to sound pretty silly in 5 years.
But what is it good for?
There is no reason for any individual to have a computer in his home.
640K ought to be enough for anybody.
Windows NT addresses 2 Gigabytes of RAM, which is more than any application will ever need.
We will never become a truly paper-less society until the Palm Pilot folks come out with WipeMe 1.0.
If it keeps up, man will atrophy all his limbs but the push-button finger.
There are so many men who can figure costs, and so few who can measure values.
A corporation is a living organism; it has to continue to shed its skin.  Methods have to change.  Focus has to change.  Values have to change.  The sum total of those changes is transformation.
The most dangerous kind of waste is the waste we do not recognize.
Your lean process should be a lean process.
There is nothing so useless as doing efficiently that which should not be done at all.
Continuous improvement is not about the things you do well - that's work.  Continuous improvement is about removing the things that get in the way of your work.  The headaches, the things that slow you down, that’s what continuous improvement is all about.
If you need a new process and don't install it, you pay for it without getting it.
Everything can be improved.
Willful waste brings woeful want.
There are many experts on how things have been done up to now. If you think something could use a little improvement, you are the expert.
Amateurs work until they get it right.  Professionals work until they can't get it wrong.
It is not the employer who pays the wages. He only handles the money.  It is the product that pays the wages.
Nature does constant value stream mapping - it's called evolution.
Don't waste time learning the "tricks of the trade."  Instead, learn the trade.
Time waste differs from material waste in that there can be no salvage.  The easiest of all wastes and the hardest to correct is the waste of time, because wasted time does not litter the floor like wasted material.
Waste is a tax on the whole people.
When solving problems, dig at the roots instead of just hacking at the leaves.
A bad system will beat a good person every time.
It is an immutable law in business that words are words, explanations are explanations, promises are promises but only performance is reality.
We are too busy mopping the floor to turn off the faucet.
Watch the little things; a small leak will sink a great ship.
Waste is worse than loss. The time is coming when every person who lays claim to ability will keep the question of waste before him constantly.  The scope of thrift is limitless.
It is more than probable that the average man could, with no injury to his health, increase his efficiency fifty percent.
The essential question is not, "How busy are you?" but "What are you busy at?
A relentless barrage of "why’s" is the best way to à your mind to pierce the clouded veil of thinking caused by the status quo. Use it often.
The first rule of any technology used in a business is that automation applied to an efficient operation will magnify the efficiency. The second is that automation applied to an inefficient operation will magnify the inefficiency.
The world we have created is a product of our thinking; it cannot be changed without changing our thinking.
If you don't know where you are going, you will probably end up somewhere else.
Improvement usually means doing something that we have never done before.
Work expands so as to fill the time available for its completion.
On the bathing-tub of King T'ang the following words were engraved: "If you would one day renovate yourself, do so from day to day. Yea, let there be daily renovation.
An environment where people have to think brings with it wisdom, and this wisdom brings with it kaizen [continuous improvement].
The impossible is often the untried.
The man who will use his skill and constructive imagination to see how much he can give for a dollar, instead of how little he can give for a dollar, is bound to succeed.
If you don't have time to do it right you must have time to do it over.
Ford's success has startled the country, almost the world, financially, industrially, mechanically.  It exhibits in higher degree than most persons would have thought possible the seemingly contradictory requirements of true efficiency, which are:  constant increase of quality, great increase of pay to the workers, repeated reduction in cost to the consumer.  And with these appears, as at once cause and effect, an absolutely incredible enlargement of output reaching something like one hundredfold in less than ten years, and an enormous profit to the manufacturer.
Great ideas need landing gear as well as wings.
Different isn't always better, but better is always different.
He who rejects change is the architect of decay.  The only human institution which rejects progress is the cemetery.
Invest a few moments in thinking.  It will pay good interest.
Don't water your weeds.
You must have long-range goals to keep you from being frustrated by short-range failures.
I don't like a man to be too efficient.  He's likely to be not human enough.
If all efficiency experts were laid end to end - I'd be in favor of it.
One half of knowing what you want is knowing what you must give up before you get it.
I shall try to correct errors when shown to be errors, and I shall adopt new views so fast as they appear to be true views.
It is better to stir up a question without deciding it, than to decide it without stirring it up.
Quality is everyone's responsibility.
It is not enough to do your best; you must know what to do, and then do your best.
Profit in business comes from repeat customers, customers that boast about your project or service, and that bring friends with them.
If you can't describe what you are doing as a process, you don't know what you're doing.
You can not inspect quality into the product; it is already there.
It does not happen all at once. There is no instant pudding.
If you stay in this world, you will never learn another one.
Does experience help? NO! Not if we are doing the wrong things.
The result of long-term relationships is better and better quality, and lower and lower costs.
We are here to make another world.” W. Edwards Deming
Don’t be afraid to make mistakes.
If you’re 60 percent sure, take action.
Before you say you can’t do something, try it.
I have seen more failures than successes.
Endure a hundred times, strengthen yourself a thousand times, and you will complete you tasks in short order.
To do what you believe is right, to do what you believe is good, and doing these things right then and in that way is a calling from on high.  Thus, do it boldly, do as you believe, do as you are.
At Toyota, we expect every assembly line worker to direct their wisdom toward originating ideas for improving base costs, quality, and safety.  Here the job of the line manager is to create an environment in which line workers can easily make suggestions and are supported to implement those suggestions.
Each person thoroughly fulfilling their duties generates great power that, gathered together in a chain, creates a ring of power.
Since it’s the customer that pays our salary, our responsibility is to make the product they want, when they want it, and deliver quality that satisfies them.
Unless we visit genba [the place where the action is], we cannot develop a good plan.
In the [Toyota] vernacular these information processing skills are called, ‘not listening to what you are told,’.
the head of an abundant rice plant hangs down” old Japanese Adage, describing the humility of senior executives of Toyota and the Toyoda family members.
If your boss refuses you something that you really want to do, don’t give up,” he said, “try pitching it two or three times.  By the third time, the boss will realise, ‘Hey, this guy is serious.’
We have to waste resources by trying many things when we are unsure of which are best.
There’s got to be a better way.
Reform business when business is good.
Don’t be afraid to make mistakes.
Simplicity is the ultimate sophistication.
Simplicity does not precede complexity, but follows it.
Productivity is being able to do things that you were never able to do before.
Innovation is the process of turning ideas into manufacturable and marketable form.
Creativity is thinking up new things. Innovation is doing new things.
Never before in history has innovation offered promise of so much to so many in so short a time.
Great innovations should not be forced on slender majorities.
Innovation by definition will not be accepted at first. It takes repeated attempts, endless demonstrations, monotonous rehearsals before innovation can be accepted and internalized by an organization. This requires 'courageous patience'.
Fashion is something barbarous, for it produces innovation without reason and imitation without benefit.
You have all the reason in the world to achieve your grandest dreams. Imagination plus innovation equals realization.
Entrepreneurs innovate. Innovation is the specific instrument of entrepreneurship. It is the act that endows resources with a new capacity to create wealth.
The world leaders in innovation and creativity will also be world leaders in everything else.
Innovation is not the product of logical thought, although the result is tied to logical structure.
Shoot for the moon. Even if you miss, you'll land among the stars.
Life would be so much easier if we only had the source code.
Men are from Mars. Women are from Venus. Computers are from hell.
Computer are like air conditioners: they stop working when you open windows.
Like car accidents, most hardware problems are due to driver error.
If you put fences around people, you get sheep. Give people the room they need.
Be a yardstick of quality. Some people aren't used to an environment where excellence is expected.
Design is not just what it looks like and feels like. Design is how it works.
I want to put a ding in the universe.
Innovation distinguishes between a leader and a follower.
Sometimes when you innovate, you make mistakes. It is best to admit them quickly, and get on with improving your other innovations.
You can't just ask customers what they want and then try to give that to them. By the time you get it built, they'll want something new.
Stay Hungry. Stay Foolish.
Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma - which is living with the results of other people's thinking. Don't let the noise of others' opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary.
I didn't know it was impossible when I did it.
He who moves not forward, goes backward.
All that is human must retrograde if it does not advance.
No snowflake in an avalanche ever feels responsible.
I try. I fail. I try again. I fail better.
Experience is not what happens to a man; it is what a man does with what happens to him.
Take care of the large problems and the small ones will tend not to bother you.
Computers are useless. They can only give you answers.
Nobody is perfect, but a team can be.
Necessity is the mother of invention.
Learn from yesterday, live for today, hope for tomorrow. The important thing is not to stop questioning.
We cannot solve our problems with the same thinking we used when we created them.
If you can't explain it simply, you don't understand it well enough.
Anyone who has never made a mistake has never tried anything new.
The only source of knowledge is experience.
Make everything as simple as possible, but not simpler.
Information is not knowledge.
I have not failed. I've just found 10,000 ways that won't work.
Genius is one percent inspiration and ninety-nine percent perspiration.
Algorithmic complexity for structured programmers: All algorithms are O(f(n)), where f is someone else’s responsibility.
Fact: 48% of IE7 usage comes from developers checking that their site works in IE7.
Programmers don’t burn out on hard work, they burn out on change-with-the-wind directives and not ‘shipping’.
I’ve known people who have not mastered their tools who are good programmers, but not a tool master who remained a mediocre programmer.
There are two types of people in this world: those who understand recursion and those who don’t understand that there are two types of people in this world.
Daddy, how is software made?” “Well, when a programmer loves an idea very much they stay up all night and then push to github the next day.
Software developers like to solve problems. If there are no problems handily available, they will create their own problems.
The problem with quick and dirty, is that the dirty remains long after the quick has been forgotten.
Prolific developers don’t always write a lot of code, instead they solve a lot of problems. The two things are not the same.
A programmer’s wife tells him: go to store. pick up a loaf of bread. If they have eggs, get a dozen. The programmer returns with 12 loaves.
Bad programmers have all the answers. Good testers have all the questions.
Our job is to tell you your baby is ugly!
The best TDD can do, is assure that code does what the programmer thinks it should do. That is pretty good BTW.
The bitterness of poor quality remains long after the sweetness of meeting the schedule has been forgotten.
One bad programmer can easily create two new jobs a year.
Don’t document bad code — rewrite it.
3 Errors walk into a bar. The barman says, “normally I’d Throw you all out, but tonight I’ll make an Exception.
Weeks of programming can save you hours of planning.
If you think it’s expensive to hire a professional, wait until you hire an amateur.
Programming can be fun, so can cryptography; however they should not be combined.
The proper use of comments is to compensate for our failure to express ourself in code.
My definition of an expert in any field is a person who knows enough about what’s really going on to be scared.
First, solve the problem. Then, write the code.
Programming is not a zero-sum game. Teaching something to a fellow programmer doesn’t take it away from you.
One of my most productive days was throwing away 1000 lines of code.
When in doubt, use brute force.
Deleted code is debugged code.
Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.
The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.
Controlling complexity is the essence of computer programming.
Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defence against complexity.
UNIX was not designed to stop its users from doing stupid things, as that would also stop them from doing clever things.
Life is too short to run proprietary software.
The central enemy of reliability is complexity.
Simplicity is prerequisite for reliability.
Simplicity is the ultimate sophistication.
The unavoidable price of reliability is simplicity.
You can’t trust code that you did not totally create yourself.
Compatibility means deliberately repeating other people’s mistakes.
Debugging time increases as a square of the program’s size.
Before software can be reusable it first has to be usable.
The best code is no code at all.
No code is faster than no code.
Program testing can be a very effective way to show the presence of bugs, but is hopelessly inadequate for showing their absence.
Parkinson’s Law “Work expands so as to fill the time available for its completion.”
Code never lies, comments sometimes do.
If we’d asked the customers what they wanted, they would have said “faster horses”.
With diligence it is possible to make anything run slowly.
Software obeys the law of gaseous expansion – it continues to grow until memory is completely filled.
A distributed system is one in which the failure of a computer you didn’t even know existed can render your own computer unusable.
The proper use of comments is to compensate for our failure to express ourself in code.
Incorrect documentation is often worse than no documentation.
Security is a state of mind.
And don’t EVER make the mistake that you can design something better than what you get from ruthless massively parallel trial-and-error with a feedback cycle. That’s giving your intelligence much too much credit.